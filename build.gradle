/*
 * The MIT License (MIT)
 * 
 * Copyright (c) 2017 Una Thompson (unascribed)
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of 
 * this software and associated documentation files (the "Software"), to deal in 
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies 
 * of the Software, and to permit persons to whom the Software is furnished to do 
 * so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all 
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
 * SOFTWARE.
 */

buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url = "https://maven.minecraftforge.net/"
		}
		maven {
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
		classpath 'gradle.plugin.net.minecrell:licenser:0.3'
	}
}

ext.early = true
apply from: 'project.gradle'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'net.minecrell.licenser'

project.ext.package = project.ext.group+'.'+project.ext.projectName.toLowerCase()

version = project.ext.version;

if (!project.ext.concreteModules.isEmpty()) {
	println("Concrete Version: "+project.ext.concreteVersion)
}

project.ext.priv = parseConfig(file('private.properties'))

group = project.ext.group
archivesBaseName = project.ext.projectName

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

repositories {
	jcenter()
	mavenCentral()
	maven {
		url 'https://repo.elytradev.com/'
	}
	if (project.ext.language == 'kotlin') {
		maven {
			url 'http://maven.shadowfacts.net/'
		}
	}
}

apply plugin: 'com.github.johnrengelman.shadow'

jar {
	classifier = 'slim'
}

shadowJar {
	classifier = ''
	relocate 'com.elytradev.concrete', project.ext.package+'.repackage.com.elytradev.concrete'
	configurations = [project.configurations.shadow]
}

reobf {
	shadowJar { mappingType = 'SEARGE' }
}

//tasks.reobfJar.doLast {
//	file('build/libs/'+archivesBaseName+'-'+version+'-slim.jar').delete()
//}

tasks.build.dependsOn reobfShadowJar

artifacts {
	archives shadowJar
}

dependencies {
	for (String module : project.ext.concreteModules) {
		shadow 'com.elytradev.concrete:concrete-'+module+':'+project.ext.concreteVersion
		deobfCompile 'com.elytradev.concrete:concrete-'+module+':'+project.ext.concreteVersion
	}
}

ext.early = false
apply from: 'project.gradle'

if (file('private.gradle').exists()) {
	apply plugin: 'maven'

	configurations {
		deploy
	}

	dependencies {
		deploy 'org.apache.maven.wagon:wagon-ssh:2.10'
	}

	apply from: 'private.gradle'
}

license {
	exclude "src/main/resources/*";
	
	exclude "**/*.xml";
	exclude "**/*.mcmeta";
	exclude "**/*.lang";
	exclude "**/*.info";
}


minecraft {
	version = "1.12.2-14.23.5.2847";
	mappings = "snapshot_20180413";

	runDir = "minecraft"

	replaceIn 'src/main/java/'+project.ext.package.replace('.', '/')+'/'+project.ext.projectName+'.java'
	replace '@VERSION@', project.version
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '*.xcf'
		exclude '*.wav'
	}
}

def parseConfig(File config) {
	if (!config.exists()) return null
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return (new ConfigSlurper().parse(prop))
	}
}
